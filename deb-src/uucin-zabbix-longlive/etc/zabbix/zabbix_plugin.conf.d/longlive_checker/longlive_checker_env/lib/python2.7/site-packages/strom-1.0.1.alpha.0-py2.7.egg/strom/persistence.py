from hash_ring import HashRing
from urlparse import urlparse
from redis import Redis

class NonePersistence(object):
    def get(self,key):
        pass

    def set(self,key,value,expire=3600):
        pass

    def delete(self,key):
        pass

class RedisPersistence(object):

    def __init__(self,server_list):
        """server is a server list"""
        connections = []
        for server in server_list:
            params = urlparse(server)
            conn = Redis(host=params.hostname,
                    port=params.port,
                    db=params.path[1:],
                    password=params.password)
            connections.append(conn)
        self.pool = HashRing(connections)

    def get(self,key):
        r = self.pool.get_node('key')
        value = r.rpop(key)
        while value:
            yield value
            value = r.rpop(key)

    def set(self,key,value,expire=3600):
        try:
            r = self.pool.get_node(key)
            return r.lpush(key,value)
        finally:
            r.expire(key,expire)
    
    def delete(self,key):
        return self.pool.get_node(key).delete(key)
        
        

def get_persistence(server_list,persistence_backend='redis'):
    if persistence_backend == 'redis':
        return RedisPersistence(server_list)
    elif persistence_backend == 'none':
        return NonePersistence()
    else:
        raise ValueError('not support this persistence_backend:%s'%persistence_backend)
